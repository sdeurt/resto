import { getRepository } from 'typeorm';
import { Request, Response } from 'express'
import * as bcrypt from 'bcrypt';
import * as jwt from 'jsonwebtoken';
import Users from './entity/Users;

import * as dotenv from 'dotenv';
dotenv.config();

const SALT ROUND = 10;
const SECRET_KEY = "   " ;

export const register = async (req:request, res: Response)=>{
    const {username, password} = req.body;
    console.log(req.body);

    const userRepository = getRepository(Users);
    const existingUser = await userRepository.findOne({
        username
    });

    if(existingUser){
        res.status(400).send({
            message:"username already taken"
        })
    }else{
        const salt= await bcrypt.genSalt(SALT ROUND);
        const hashPassword = await bcrypt.hash (password, salt);

        const user = await userRepository.create({
            username,
            password, hashPassword
        });

        await userRepository.save(user);
        res.send({ message: 'User created'});
    }
};

export const login = async (req: Request, res: Response) => {
    const {username, password} = req.body;
    const userRepository = await userRepository(User);
    const user = await userRepository.findOne({
        username
    });

    if(!user) {
        res.status(400).send({ message: 'invalid username or password'});
    }
    else{
        const isSuccess = await bcrypt.compare(password, user.password);

        if(isSuccess) {
            const payload =(
                id: user.id,
                name: user.name
            );


        const token = jwt.sign(payload, SECRET_KEY, {expireIn: 3600});
        res.status(200).send ({ token });

        } else {
            res.status(400).send ({ message: 'Invalid username or password});
        }
    }
}
